% 递推最小二乘算法RLS
% z(k)=1.5*z(k-1)-0.7*z(k-2)+u(k-1)+0.5*u(k-2)
clear;  clc ; close all;

h=figure(1); 
u=getM;

% 赋初值
c0=[0.001 0.001 0.001 0.001]';  % 直接给出被辨识参数的初始值,即一个充分小的实向量
p0=10^6*eye(4,4);                    % 直接给出初始状态P0，即一个充分大的实数单位矩阵
E=0.000000005;                        % 相对误差E=0.000000005
c=[c0,zeros(4,14)];                    % 被辨识参数矩阵的初始值及大小
e=zeros(4,15);                          % 相对误差的初始值及大小
z(2)=0;z(1)=0;                           % 取z的前两个初始值为零

for k=3:15                                                 % 循环变量从3到15   
    z(k)=1.5*z(k-1)-0.7*z(k-2)+u(k-1)+0.5*u(k-2);%给出理想的辨识输出采样信号       
    %------------RLS递推最小二乘辨识-----------------
    h1=[-z(k-1),-z(k-2),u(k-1),u(k-2)]';     % ------构造样本矩阵H---------
    k1=p0*h1*(h1'*p0*h1+1)^(-1);          % ------求增益矩阵K(k)--------
    c1=c0+k1*(z(k)-h1'*c0);                     % ---求被辨识参数theta(k)-----
    p1=p0-k1*k1'*(h1'*p0*h1+1);            % --------求矩阵P(k)-----------
    p0=p1;                                               %   更新P(k)
    
    %----计算误差---
    e1=c1-c0;             % 求估计参数当前值与上一次的值的差值
    e2=e1./c0;            % 求估计参数的相对变化
    e(:,k)=e2;              % 把当前相对变化的列向量加入误差矩阵的最后一列       
    c0=c1;                  % 新获得的参数作为下一次递推的旧参数
    c(:,k)=c1;              % 把辨识参数c 列向量加入辨识参数矩阵的最后一列 
    
    %----判断终止条件---
    if e2<=E break;    end       % 若参数收敛满足要求，终止计算
    showResult(u,z,c,e,h);
end                                % 大循环结束
% c%显示被辨识参数
% e%显示辨识结果的收敛情况

%% 子程序
function showResult(u,z,c,e,h)
%% 显示结果 
j=length(z);
i=1:j;
a1=c(1,1:j); a2=c(2,1:j); b1=c(3,1:j); b2=c(4,1:j); ea1=e(1,1:j); ea2=e(2,1:j); eb1=e(3,1:j); eb2=e(4,1:j); 
subplot 221;stem(i,u(1:j));xlabel('t');ylabel('u');
subplot 223;plot(i,z,'-*');xlabel('t');ylabel('z');
subplot 222;plot(i,a1,'r',i,a2,':',i,b1,'g',i,b2,':');xlabel('t');ylabel('辨识参数');
% title('Parameter Identification with Recursive Least Squares Method')% 图形标题
k=j-2;
text(k-2,-1.5,'a1=-1.5');
text(k-2,0.7,'a2=0.7');
text(k-2,1,'b1=1');
text(k-2,0.5,'b2=0.5');
subplot 224;plot(i,ea1,'r',i,ea2,'g',i,eb1,'b',i,eb2,'r:'); % 画出a1，a2，b1，b2的各次辨识结果的收敛情况
xlabel('t');ylabel('e');
title('Identification Precision') % 图形标题
pause(0.2);
end
function out=getM()
%% ----------------生成M序列-------------------
L=15;% M序列的周期
y1=1;y2=1;y3=1;y4=0;%四个移位积存器的输出初始值
for i=1:L;%开始循环，长度为L
    x1=xor(y3,y4);%第一个移位积存器的输入是第3个与第4个移位积存器的输出的“或”
    x2=y1;%第二个移位积存器的输入是第3个移位积存器的输出
    x3=y2;%第三个移位积存器的输入是第2个移位积存器的输出
    x4=y3;%第四个移位积存器的输入是第3个移位积存器的输出
    y(i)=y4;%取出第四个移位积存器幅值为"0"和"1"的输出信号，
    if y(i)>0.5,u(i)=-0.03;%如果M序列的值为"1"时,辨识的输入信号取“-0.03”
    else u(i)=0.03;%当M序列的值为"0"时,辨识的输入信号取“0.03”
    end%小循环结束
    y1=x1;y2=x2;y3=x3;y4=x4;%为下一次的输入信号做准备
end%大循环结束，产生输入信号u 
figure(1);%第1个图形
stem(u),grid on%以径的形式显示出输入信号并给图形加上网格
out=u;
end
